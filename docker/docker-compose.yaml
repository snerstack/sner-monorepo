---
services:
  server:
    build:
      context: ..
      dockerfile: docker/server/Dockerfile
    image: sner_server
    container_name: sner_server
    environment:
      SNER_SERVER_SECRET_KEY:
      SNER_SERVER_DB_PASSWORD:
      SNER_ADMIN_PASSWORD:
      SNER_AGENT_APIKEY:

      SNER_CONFIG: |
        server:
          secret_key: "${SNER_SERVER_SECRET_KEY}"
          sqlalchemy_database_uri: "postgresql://sner:${SNER_SERVER_DB_PASSWORD}@database/sner"
    volumes:
      - server_data:/var/lib/sner
    ports:
      - 18000:18000
    restart: always
    depends_on:
      - database
    networks:
      - backend

  planner:
    image: sner_server
    container_name: sner_planner
    entrypoint: ["/opt/sner/server/venv/bin/python3", "/opt/sner/server/bin/server", "planner", "run"]
    environment:
      SNER_SERVER_DB_PASSWORD:

      SNER_CONFIG: |
        server:
          secret_key: "${SNER_SERVER_SECRET_KEY}"
          sqlalchemy_database_uri: "postgresql://sner:${SNER_SERVER_DB_PASSWORD}@database/sner"
        planner:
          home_netranges_ipv4: []
          home_netranges_ipv6: ['::1/128']
          stage:
            service_scan:
              queues:
                - "sner.nmap.serviceversion"
            service_disco:
              queue: "sner.nmap.servicedisco"
            six_dns_disco:
              queue: "sner.six_dns_discover"
            six_enum_disco:
              queue: "sner.six_enum_discover"
            netlist_enum:
              schedule: 120days
            storage_six_enum:
              schedule: 90days
            storage_rescan:
              schedule: 1hour
              host_interval: 60days
              service_interval: 20days
            load_standalone:
              queues:
                - "sner.nuclei"
            rebuild_versioninfo_map:
              schedule: 10m

    volumes:
      - server_data:/var/lib/sner
    restart: always
    depends_on:
      - database
    networks:
      - backend

  agent:
    build:
      context: ..
      dockerfile: docker/agent/Dockerfile
    image: sner_agent
    container_name: sner_agent
    environment:
      SNER_AGENT_APIKEY:

      SNER_CONFIG: |
        agent:
          server: "http://server:18000"
          apikey: "${SNER_AGENT_APIKEY}"
    restart: always
    depends_on:
      - server
    networks:
      - backend

  database:
    image: postgres:15-bookworm
    container_name: sner_database
    volumes:
      - database_data:/var/lib/postgresql/data
    environment:
      SNER_SERVER_DB_PASSWORD:

      POSTGRES_DB: sner
      POSTGRES_USER: sner
      POSTGRES_PASSWORD: "${SNER_SERVER_DB_PASSWORD}"
    restart: always
    networks:
      - backend

volumes:
  database_data:
  server_data:

networks:
  backend:
